services:
  postgres:
    profiles: ["dev", "staging", "prod"]
    image: postgres:15
    environment:
      POSTGRES_DB: recyclic
      POSTGRES_USER: recyclic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recyclic"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recyclic-network

  redis:
    profiles: ["dev", "staging", "prod"]
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recyclic-network

  api:
    profiles: ["dev", "staging", "prod"]
    build: ./api
    image: recyclic-api:${API_IMAGE_TAG:-latest}
    # CRITICAL (B18-P0): --proxy-headers is mandatory for production/staging to prevent Mixed Content errors
    # This command ensures Uvicorn correctly handles X-Forwarded-* headers from Traefik
    command: uvicorn recyclic_api.main:app --host 0.0.0.0 --port 8000 --proxy-headers --forwarded-allow-ips="*"
    environment:
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      HOST: 0.0.0.0
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS:-http://localhost:4444}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:4444}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:4444}
      # Variables pour Alembic migrations
      POSTGRES_HOST: postgres
      POSTGRES_USER: recyclic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_DB: recyclic
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - recyclic-network
      - traefik-public
    labels:
      # Exposer l'API à Traefik pour les environnements de staging et de production
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      # Routeur pour la production
      - "traefik.http.routers.recyclic-api-prod.rule=Host(`recyclic.jarvos.eu`) && PathPrefix(`/api`)"
      - "traefik.http.routers.recyclic-api-prod.entrypoints=websecure"
      - "traefik.http.routers.recyclic-api-prod.tls.certresolver=myresolver"
      # Routeur pour le staging
      - "traefik.http.routers.recyclic-api-staging.rule=Host(`devrecyclic.jarvos.eu`) && PathPrefix(`/api`)"
      - "traefik.http.routers.recyclic-api-staging.entrypoints=websecure"
      - "traefik.http.routers.recyclic-api-staging.tls.certresolver=myresolver"
      # Service commun
      - "traefik.http.services.recyclic-api.loadbalancer.server.port=8000"

  bot:
    profiles: ["dev", "staging", "prod"]
    build: ./bot
    image: recyclic-bot:${BOT_IMAGE_TAG:-latest}
    environment:
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic
      REDIS_URL: redis://redis:6379
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_BASE_URL: http://api:8000
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:4444}
      ADMIN_TELEGRAM_IDS: ${ADMIN_TELEGRAM_IDS}
      ENABLE_INLINE_BUTTONS: ${ENABLE_INLINE_BUTTONS:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recyclic-network

  # Service dédié pour les migrations Alembic avec configuration Docker optimisée
  api-migrations:
    build:
      context: ./api
      dockerfile: Dockerfile.migrations
    image: recyclic-api-migrations:${API_MIGRATIONS_IMAGE_TAG:-latest}
    environment:
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      # Variables pour Alembic migrations
      POSTGRES_HOST: postgres
      POSTGRES_USER: recyclic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_DB: recyclic
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - recyclic-network

  # # Service dédié pour les tests avec volumes pour développement rapide
  # api-tests:
  #   build:
  #     context: ./api
  #     dockerfile: Dockerfile.tests
  #   image: recyclic-api-tests:${API_TESTS_IMAGE_TAG:-latest}
  #   environment:
  #     TESTING: "true"
  #     ENVIRONMENT: "test"
  #     DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic_test
  #     TEST_DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic_test
  #     REDIS_URL: redis://redis:6379
  #     SECRET_KEY: ${SECRET_KEY}
  #   volumes:
  #     # Volumes pour éviter les rebuilds lors du développement
  #     - ./api/src:/app/src:ro
  #     - ./api/tests:/app/tests:ro
  #     - ./api/migrations:/app/migrations
  #     - ./api/alembic.ini:/app/alembic.ini:ro
  #     - ./api/pytest.ini:/app/pytest.ini:ro
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   command: bash -lc "python generate_openapi.py && alembic upgrade head && python -m pytest -v --tb=short"
  #   networks:
  #     - recyclic-network

  # # Service dédié pour les tests du bot
  # bot-tests:
  #   build:
  #     context: ./bot
  #     dockerfile: Dockerfile.tests
  #   image: recyclic-bot-tests:${BOT_TESTS_IMAGE_TAG:-latest}
  #   environment:
  #     TESTING: "true"
  #     ENVIRONMENT: "test"
  #     DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic_test
  #     REDIS_URL: redis://redis:6379
  #     TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
  #     API_BASE_URL: http://api:8000
  #     FRONTEND_URL: ${FRONTEND_URL:-http://localhost:4444}
  #     ADMIN_TELEGRAM_IDS: ${ADMIN_TELEGRAM_IDS}
  #     ENABLE_INLINE_BUTTONS: ${ENABLE_INLINE_BUTTONS:-true}
  #   volumes:
  #     # Volumes pour éviter les rebuilds lors du développement
  #     - ./bot/src:/app/src:ro
  #     - ./bot/tests:/app/tests:ro
  #     - ./bot/pytest.ini:/app/pytest.ini:ro
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     api:
  #       condition: service_healthy
  #   networks:
  #     - recyclic-network

  # ============================================================
  # FRONTEND SERVICES - PROFILE-BASED CONFIGURATION
  # ============================================================

  # DEV: Frontend with hot-reload for local development
  frontend-dev:
    profiles: ["dev"]
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    image: recyclic-frontend-dev:${FRONTEND_IMAGE_TAG:-latest}
    environment:
      DANGEROUSLY_DISABLE_HOST_CHECK: "true"
    ports:
      - "4444:5173"
    volumes:
      # Mount source code for hot-reloading
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/vite.config.ts:/app/vite.config.ts
    depends_on:
      api:
        condition: service_healthy
    networks:
      - recyclic-network

  # STAGING: Frontend with Traefik labels for staging environment
  frontend-staging:
    profiles: ["staging"]
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL_STAGING}
    image: recyclic-frontend-staging:${FRONTEND_IMAGE_TAG:-latest}
    environment:
      HOST: 0.0.0.0
    depends_on:
      api:
        condition: service_healthy
    networks:
      - traefik-public
      - recyclic-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.recyclic-frontend-staging.rule=Host(`devrecyclic.jarvos.eu`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.recyclic-frontend-staging.entrypoints=websecure"
      - "traefik.http.routers.recyclic-frontend-staging.tls.certresolver=myresolver"
      - "traefik.http.routers.recyclic-frontend-staging.priority=1"
      - "traefik.http.services.recyclic-frontend-staging.loadbalancer.server.port=80"

  # PROD: Frontend with Traefik labels for production environment
  frontend-prod:
    profiles: ["prod"]
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL_PROD}
    image: recyclic-frontend-prod:${FRONTEND_IMAGE_TAG:-latest}
    environment:
      HOST: 0.0.0.0
    depends_on:
      api:
        condition: service_healthy
    networks:
      - traefik-public
      - recyclic-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.recyclic-frontend-prod.rule=Host(`recyclic.jarvos.eu`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.recyclic-frontend-prod.entrypoints=websecure"
      - "traefik.http.routers.recyclic-frontend-prod.tls.certresolver=myresolver"
      - "traefik.http.routers.recyclic-frontend-prod.priority=1"
      - "traefik.http.services.recyclic-frontend-prod.loadbalancer.server.port=80"

volumes:
  postgres_data:

networks:
  recyclic-network:
    driver: bridge
  # External network for Traefik (production/staging only)
  traefik-public:
    external: true
