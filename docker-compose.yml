services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: recyclic
      POSTGRES_USER: recyclic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recyclic"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recyclic-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recyclic-network

  api:
    build: ./api
    image: recyclic-api:${API_IMAGE_TAG:-latest}
    environment:
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: development
      # Variables pour Alembic migrations
      POSTGRES_HOST: postgres
      POSTGRES_USER: recyclic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_DB: recyclic
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - recyclic-network

  bot:
    build: ./bot
    image: recyclic-bot:${BOT_IMAGE_TAG:-latest}
    environment:
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic
      REDIS_URL: redis://redis:6379
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_BASE_URL: http://api:8000
      FRONTEND_URL: ${FRONTEND_URL}
      ADMIN_TELEGRAM_IDS: ${ADMIN_TELEGRAM_IDS}
      ENABLE_INLINE_BUTTONS: ${ENABLE_INLINE_BUTTONS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recyclic-network

  # Service dédié pour les migrations Alembic avec configuration Docker optimisée
  api-migrations:
    build:
      context: ./api
      dockerfile: Dockerfile.migrations
    image: recyclic-api-migrations:${API_MIGRATIONS_IMAGE_TAG:-latest}
    environment:
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: development
      # Variables pour Alembic migrations
      POSTGRES_HOST: postgres
      POSTGRES_USER: recyclic
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_DB: recyclic
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - recyclic-network

  frontend:
    build:
      context: ./frontend
    image: recyclic-frontend:${FRONTEND_IMAGE_TAG:-latest}
    ports:
      - "4444:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - recyclic-network

  # Service dédié pour les tests avec volumes pour développement rapide
  api-tests:
    build:
      context: ./api
      dockerfile: Dockerfile.tests
    image: recyclic-api-tests:${API_TESTS_IMAGE_TAG:-latest}
    environment:
      TESTING: "true"
      ENVIRONMENT: "test"
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic_test
      TEST_DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic_test
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      # Volumes pour éviter les rebuilds lors du développement
      - ./api/src:/app/src:ro
      - ./api/tests:/app/tests:ro
      - ./api/migrations:/app/migrations
      - ./api/alembic.ini:/app/alembic.ini:ro
      - ./api/pytest.ini:/app/pytest.ini:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: bash -lc "python generate_openapi.py && alembic upgrade head && python -m pytest -v --tb=short"
    networks:
      - recyclic-network

  # Service dédié pour les tests du bot
  bot-tests:
    build:
      context: ./bot
      dockerfile: Dockerfile.tests
    image: recyclic-bot-tests:${BOT_TESTS_IMAGE_TAG:-latest}
    environment:
      TESTING: "true"
      ENVIRONMENT: "test"
      DATABASE_URL: postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic_test
      REDIS_URL: redis://redis:6379
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_BASE_URL: http://api:8000
      FRONTEND_URL: ${FRONTEND_URL}
      ADMIN_TELEGRAM_IDS: ${ADMIN_TELEGRAM_IDS}
      ENABLE_INLINE_BUTTONS: ${ENABLE_INLINE_BUTTONS}
    volumes:
      # Volumes pour éviter les rebuilds lors du développement
      - ./bot/src:/app/src:ro
      - ./bot/tests:/app/tests:ro
      - ./bot/pytest.ini:/app/pytest.ini:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - recyclic-network

volumes:
  postgres_data:

networks:
  recyclic-network:
    driver: bridge