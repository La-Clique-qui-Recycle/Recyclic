---
alwaysApply: true
description: Règle pour l'accès à la documentation technique et au code via Archon MCP
---

# Accès à la Documentation Technique via Archon MCP

## Documentation Technique Disponible

### Sources de Documentation
- **Archon MCP** : Base de connaissances complète avec documentation technique
- **Documentation du projet** : [docs/](mdc:docs/) - Architecture, PRD, stories
- **Code source** : Recherche sémantique dans le codebase
- **Exemples de code** : Recherche d'exemples dans Archon

### Commandes Archon MCP Obligatoires

#### Recherche de Documentation
```python
# Rechercher dans la base de connaissances
mcp_archon_perform_rag_query(query="votre question technique")

# Rechercher des exemples de code
mcp_archon_search_code_examples(query="votre recherche de code")

# Lister les sources disponibles
mcp_archon_get_available_sources()
```

#### Gestion des Projets et Tâches
```python
# Lister les projets
mcp_archon_list_projects()

# Obtenir les détails d'un projet
mcp_archon_get_project(project_id="uuid")

# Lister les tâches
mcp_archon_list_tasks()

# Obtenir les détails d'une tâche
mcp_archon_get_task(task_id="uuid")
```

## Workflow de Recherche Technique

### 1. Recherche Initiale
- **Toujours commencer** par une recherche dans Archon MCP
- **Utiliser des requêtes spécifiques** pour la documentation technique
- **Consulter les exemples de code** disponibles

### 2. Documentation du Projet
- **Architecture** : [docs/architecture/](mdc:docs/architecture/)
- **PRD** : [docs/prd/](mdc:docs/prd/)
- **Stories** : [docs/stories/](mdc:docs/stories/)
- **Standards** : [docs/coding-standards.md](mdc:docs/coding-standards.md)

### 3. Recherche dans le Code
- **Utiliser codebase_search** pour la recherche sémantique
- **Utiliser grep** pour les recherches exactes
- **Consulter les fichiers de configuration** : [docker-compose.yml](mdc:docker-compose.yml), [env.example](mdc:env.example)

## Règles d'Utilisation

### Avant de Coder
1. **Rechercher dans Archon MCP** la documentation pertinente
2. **Consulter les exemples de code** disponibles
3. **Vérifier les standards** du projet
4. **Rechercher dans le codebase** les implémentations existantes

### Pendant le Développement
1. **Maintenir la cohérence** avec la documentation technique
2. **Suivre les patterns** trouvés dans les exemples
3. **Respecter les standards** documentés
4. **Documenter les décisions** importantes

### Après le Développement
1. **Mettre à jour Archon** avec les nouvelles informations
2. **Créer des exemples** si nécessaire
3. **Documenter les changements** dans la base de connaissances

## Exemples de Requêtes Archon

### Documentation Technique
```python
# Architecture du système
mcp_archon_perform_rag_query(query="architecture système FastAPI PostgreSQL")

# Configuration Docker
mcp_archon_perform_rag_query(query="configuration Docker services")

# Tests et qualité
mcp_archon_perform_rag_query(query="stratégie tests unitaires intégration")
```

### Exemples de Code
```python
# Exemples d'API FastAPI
mcp_archon_search_code_examples(query="endpoints API FastAPI")

# Exemples de tests
mcp_archon_search_code_examples(query="tests unitaires pytest")

# Exemples de modèles de données
mcp_archon_search_code_examples(query="modèles SQLAlchemy Pydantic")
```

## Intégration avec le Workflow

### Cycle de Développement avec Archon
1. **Rechercher** → Utiliser Archon MCP pour la documentation
2. **Analyser** → Consulter les exemples et standards
3. **Implémenter** → Coder selon la documentation trouvée
4. **Documenter** → Mettre à jour Archon avec les nouvelles informations
5. **Valider** → Vérifier la cohérence avec la documentation

### Gestion des Tâches
- **Toujours consulter** la documentation technique avant de commencer
- **Utiliser les exemples** disponibles dans Archon
- **Maintenir la cohérence** avec l'architecture documentée
- **Mettre à jour** la base de connaissances après implémentation

## Ressources Clés

### Documentation Projet
- **Architecture** : [docs/architecture/](mdc:docs/architecture/)
- **API** : [docs/architecture/api-specification.md](mdc:docs/architecture/api-specification.md)
- **Base de données** : [docs/architecture/database-schema.md](mdc:docs/architecture/database-schema.md)
- **Frontend** : [docs/architecture/frontend-architecture.md](mdc:docs/architecture/frontend-architecture.md)

### Configuration
- **Docker** : [docker-compose.yml](mdc:docker-compose.yml)
- **Variables** : [env.example](mdc:env.example)
- **Dépendances** : [api/requirements.txt](mdc:api/requirements.txt), [frontend/package.json](mdc:frontend/package.json)

### Code Source
- **API** : [api/src/](mdc:api/src/)
- **Bot** : [bot/src/](mdc:bot/src/)
- **Frontend** : [frontend/src/](mdc:frontend/src/)

## Règles de Communication

### Langue
- **Toujours répondre en français**
- **Documentation** en français
- **Commentaires de code** en français
- **Messages de commit** en français

### Format des Réponses
- **Utiliser les outils** pour les actions
- **Mettre à jour Archon** pour chaque action
- **Documenter** les décisions importantes
- **Suivre** les standards de codage du projet