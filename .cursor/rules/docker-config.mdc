---
globs: *.yml,*.yaml,Dockerfile*,docker-compose*,requirements.txt,package.json
description: Configuration Docker et gestion des dépendances
---

# Docker & Configuration - Recyclic

## Docker Compose Configuration

### Services Principaux
- **postgres** : PostgreSQL 15 avec healthcheck
- **redis** : Redis 7 Alpine avec healthcheck  
- **api** : Service FastAPI sur port 4433/8000
- **bot** : Bot Telegram (mode polling)
- **bot-webhook** : Bot Telegram (mode webhook) sur port 8001
- **frontend** : Interface React sur port 4444/3000

### Healthchecks
- **PostgreSQL** : `pg_isready -U recyclic`
- **Redis** : `redis-cli ping`
- **API** : `curl -f http://localhost:8000/health`

### Réseau
- **Nom** : `recyclic-network`
- **Type** : Bridge
- **Communication** : Inter-services via noms de services

## Dockerfiles

### API (FastAPI)
- **Base** : Python 3.11+
- **Dépendances** : [api/requirements.txt](mdc:api/requirements.txt)
- **Structure** : Multi-stage build pour optimisation
- **Port** : 8000 (interne)

### Bot (Telegram)
- **Base** : Python 3.11+
- **Dépendances** : [bot/requirements.txt](mdc:bot/requirements.txt)
- **Modes** : Polling et Webhook
- **Port** : 8001 (webhook uniquement)

### Frontend (React)
- **Base** : Node.js 18+
- **Dépendances** : [frontend/package.json](mdc:frontend/package.json)
- **Build** : Production optimisé
- **Port** : 3000 (interne)

## Variables d'Environnement

### Configuration Requise
- **POSTGRES_PASSWORD** : Mot de passe base de données
- **SECRET_KEY** : Clé secrète pour l'API
- **TELEGRAM_BOT_TOKEN** : Token du bot Telegram
- **ADMIN_TELEGRAM_IDS** : IDs des administrateurs

### URLs de Service
- **DATABASE_URL** : `postgresql://recyclic:${POSTGRES_PASSWORD}@postgres:5432/recyclic`
- **REDIS_URL** : `redis://redis:6379`
- **API_BASE_URL** : `http://api:8000` (interne)
- **FRONTEND_URL** : `http://localhost:4444` (externe)

## Commandes Docker Utiles

### Démarrage
```bash
# WSL/Linux
./start.sh

# Windows (WSL préféré)
wsl ./start.sh

# Manuel
docker-compose up -d
```

### Debugging
```bash
# Logs en temps réel
docker-compose logs -f

# Logs d'un service spécifique
docker-compose logs -f api

# Accès au conteneur
docker-compose exec api bash
```

### Maintenance
```bash
# Redémarrage service
docker-compose restart api

# Reconstruction images (utiliser le cache pour plus de rapidité)
docker-compose build api

# Reconstruction complète (seulement si nécessaire)
docker-compose build --no-cache api

# Nettoyage complet
docker-compose down -v
```

### Optimisation du Cache Docker
- **Développement** : Utiliser `docker-compose build api` (avec cache) pour les modifications de code
- **Dépendances** : Utiliser `--no-cache` seulement si `requirements.txt` ou `package.json` changent
- **Production** : Toujours utiliser `--no-cache` pour garantir la reproductibilité

## Volumes et Persistance

### PostgreSQL
- **Volume** : `postgres_data`
- **Migrations** : `./api/migrations:/docker-entrypoint-initdb.d`
- **Persistance** : Données sauvegardées entre redémarrages

### Redis
- **Mode** : In-memory (pas de persistance configurée)
- **Usage** : Cache et sessions temporaires