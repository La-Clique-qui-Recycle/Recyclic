---
alwaysApply: true
description: Structure et architecture du projet Recyclic
---

# Project Structure - Recyclic

## Architecture G√©n√©rale
Le projet Recyclic est une plateforme de recyclage intelligente avec 3 composants principaux :

### üèóÔ∏è Structure des R√©pertoires

```
recyclic/
‚îú‚îÄ‚îÄ api/                    # API FastAPI Backend
‚îú‚îÄ‚îÄ bot/                    # Bot Telegram IA
‚îú‚îÄ‚îÄ frontend/               # Interface Web React
‚îú‚îÄ‚îÄ docs/                   # Documentation compl√®te
‚îî‚îÄ‚îÄ docker-compose.yml      # Orchestration des services
```

## Backend API (FastAPI)
- **R√©pertoire** : [api/](mdc:api/)
- **Point d'entr√©e** : [api/src/main.py](mdc:api/src/main.py)
- **Structure** :
  - `src/api/` : Routes et endpoints
  - `src/models/` : Mod√®les SQLAlchemy
  - `src/schemas/` : Sch√©mas Pydantic
  - `src/core/` : Configuration et utilitaires
  - `migrations/` : Migrations Alembic
- **Base de donn√©es** : PostgreSQL 15
- **Cache** : Redis 7
- **Port** : 4433 (externe) / 8000 (interne)

## Bot Telegram
- **R√©pertoire** : [bot/](mdc:bot/)
- **Point d'entr√©e** : [bot/src/main.py](mdc:bot/src/main.py)
- **Structure** :
  - `src/handlers/` : Gestionnaires de commandes
  - `src/services/` : Services m√©tier
- **Fonctionnalit√©s** : Classification IA, inscription utilisateurs
- **Modes** : Polling et Webhook

## Frontend React
- **R√©pertoire** : [frontend/](mdc:frontend/)
- **Point d'entr√©e** : [frontend/src/App.js](mdc:frontend/src/App.js)
- **Structure** :
  - `src/components/` : Composants React
  - `src/pages/` : Pages de l'application
  - `src/services/` : Services API
- **Port** : 4444 (externe) / 3000 (interne)

## Documentation
- **R√©pertoire** : [docs/](mdc:docs/)
- **Architecture** : [docs/architecture/](mdc:docs/architecture/)
- **PRD** : [docs/prd/](mdc:docs/prd/)
- **Stories** : [docs/stories/](mdc:docs/stories/)

## Services Docker
- **PostgreSQL** : Base de donn√©es principale
- **Redis** : Cache et sessions
- **API** : Service FastAPI
- **Bot** : Service Telegram (polling)
- **Bot-Webhook** : Service Telegram (webhook)
- **Frontend** : Interface utilisateur

## Variables d'Environnement
- **Fichier** : [env.example](mdc:env.example)
- **Variables cl√©s** :
  - `POSTGRES_PASSWORD` : Mot de passe base de donn√©es
  - `SECRET_KEY` : Cl√© secr√®te API
  - `TELEGRAM_BOT_TOKEN` : Token bot Telegram
  - `ADMIN_TELEGRAM_IDS` : IDs administrateurs