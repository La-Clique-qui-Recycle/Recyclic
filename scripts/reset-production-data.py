#!/usr/bin/env python3
"""
Script de Purge des Donn√©es de Test - Projet Recyclic
====================================================

Ce script permet de purger toutes les donn√©es de transaction et de test
avant la mise en production, tout en pr√©servant les donn√©es de configuration.

Auteur: James (Dev Agent)
Date: 2025-01-27
Version: 1.0

Usage:
    python scripts/reset-production-data.py

S√©curit√©:
- Demande une confirmation explicite avant suppression
- Ne supprime QUE les donn√©es de transaction
- Pr√©serve les utilisateurs, cat√©gories, sites et param√®tres
"""

import os
import sys
import getpass
from typing import List, Dict, Any
from datetime import datetime
import logging

# Ajouter le chemin du projet pour les imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'api', 'src'))

from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/reset-production-data.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ProductionDataReset:
    """Classe pour g√©rer la purge s√©curis√©e des donn√©es de production."""
    
    # Tables de transaction √† purger (dans l'ordre de suppression pour respecter les FK)
    TRANSACTION_TABLES = [
        'sale_items',      # Lignes de vente (FK vers sales)
        'sales',          # Ventes (FK vers cash_sessions)
        'ligne_depot',    # Lignes de d√©p√¥t (FK vers ticket_depot)
        'ticket_depot',   # Tickets de d√©p√¥t (FK vers poste_reception)
        'deposits',       # D√©p√¥ts d'objets
        'poste_reception', # Postes de r√©ception
        'cash_sessions',  # Sessions de caisse
    ]
    
    # Tables de configuration √† PR√âSERVER
    CONFIG_TABLES = [
        'users',
        'categories', 
        'sites',
        'cash_registers',
        'settings',
        'admin_settings',
        'user_status_history',
        'login_history',
        'email_events',
        'sync_logs'
    ]
    
    def __init__(self):
        """Initialise la connexion √† la base de donn√©es."""
        self.engine = None
        self.session = None
        self._connect_to_database()
    
    def _connect_to_database(self):
        """√âtablit la connexion √† la base de donn√©es via les variables d'environnement."""
        try:
            # R√©cup√©ration des variables d'environnement
            db_host = os.getenv('POSTGRES_HOST', 'localhost')
            db_port = os.getenv('POSTGRES_PORT', '5432')
            db_name = os.getenv('POSTGRES_DB', 'recyclic')
            db_user = os.getenv('POSTGRES_USER', 'recyclic')
            db_password = os.getenv('POSTGRES_PASSWORD')
            
            if not db_password:
                raise ValueError("POSTGRES_PASSWORD n'est pas d√©finie dans les variables d'environnement")
            
            # Construction de l'URL de connexion
            database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
            
            # Connexion √† la base de donn√©es avec param√®tres optimis√©s
            self.engine = create_engine(
                database_url, 
                echo=False,
                pool_pre_ping=True,  # V√©rification de la connexion avant utilisation
                pool_recycle=3600   # Recyclage des connexions toutes les heures
            )
            Session = sessionmaker(bind=self.engine)
            self.session = Session()
            
            logger.info(f"Connexion √©tablie √† la base de donn√©es: {db_host}:{db_port}/{db_name}")
            
        except Exception as e:
            logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
            sys.exit(1)
    
    def get_table_counts(self) -> Dict[str, int]:
        """R√©cup√®re le nombre d'enregistrements dans chaque table de transaction."""
        counts = {}
        inspector = inspect(self.engine)
        
        for table_name in self.TRANSACTION_TABLES:
            try:
                if inspector.has_table(table_name):
                    result = self.session.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                    counts[table_name] = result.scalar()
                else:
                    counts[table_name] = 0
                    logger.warning(f"Table {table_name} n'existe pas")
            except Exception as e:
                logger.error(f"Erreur lors du comptage de {table_name}: {e}")
                counts[table_name] = -1
        
        return counts
    
    def get_config_table_counts(self) -> Dict[str, int]:
        """R√©cup√®re le nombre d'enregistrements dans les tables de configuration."""
        counts = {}
        inspector = inspect(self.engine)
        
        for table_name in self.CONFIG_TABLES:
            try:
                if inspector.has_table(table_name):
                    result = self.session.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                    counts[table_name] = result.scalar()
                else:
                    counts[table_name] = 0
            except Exception as e:
                logger.error(f"Erreur lors du comptage de {table_name}: {e}")
                counts[table_name] = -1
        
        return counts
    
    def display_current_state(self):
        """Affiche l'√©tat actuel de la base de donn√©es."""
        print("\n" + "="*60)
        print("üìä √âTAT ACTUEL DE LA BASE DE DONN√âES")
        print("="*60)
        
        # Tables de transaction
        print("\nüìà DONN√âES DE TRANSACTION (seront supprim√©es):")
        transaction_counts = self.get_table_counts()
        total_transaction = 0
        
        for table, count in transaction_counts.items():
            if count >= 0:
                print(f"  ‚Ä¢ {table:<20}: {count:>6} enregistrements")
                total_transaction += count
            else:
                print(f"  ‚Ä¢ {table:<20}: ERREUR")
        
        print(f"  {'TOTAL':<20}: {total_transaction:>6} enregistrements")
        
        # Tables de configuration
        print("\n‚öôÔ∏è  DONN√âES DE CONFIGURATION (seront pr√©serv√©es):")
        config_counts = self.get_config_table_counts()
        total_config = 0
        
        for table, count in config_counts.items():
            if count >= 0:
                print(f"  ‚Ä¢ {table:<20}: {count:>6} enregistrements")
                total_config += count
            else:
                print(f"  ‚Ä¢ {table:<20}: ERREUR")
        
        print(f"  {'TOTAL':<20}: {total_config:>6} enregistrements")
        
        print("\n" + "="*60)
    
    def confirm_deletion(self) -> bool:
        """Demande confirmation explicite √† l'utilisateur."""
        print("\n" + "‚ö†Ô∏è" * 20 + " ATTENTION " + "‚ö†Ô∏è" * 20)
        print("üö® CETTE OP√âRATION VA SUPPRIMER TOUTES LES DONN√âES DE TRANSACTION üö®")
        print("‚ö†Ô∏è" * 50)
        print()
        print("Les donn√©es suivantes seront SUPPRIM√âES :")
        print("  ‚Ä¢ Toutes les ventes et leurs lignes")
        print("  ‚Ä¢ Toutes les sessions de caisse")
        print("  ‚Ä¢ Tous les d√©p√¥ts d'objets")
        print("  ‚Ä¢ Tous les tickets et postes de r√©ception")
        print()
        print("Les donn√©es suivantes seront PR√âSERV√âES :")
        print("  ‚Ä¢ Utilisateurs et leurs comptes")
        print("  ‚Ä¢ Cat√©gories et prix")
        print("  ‚Ä¢ Sites et caisses")
        print("  ‚Ä¢ Param√®tres syst√®me")
        print()
        print("Cette op√©ration est IRR√âVERSIBLE !")
        print()
        
        # Demande de confirmation
        confirmation = input("Tapez 'OUI' (en majuscules) pour confirmer la suppression : ")
        
        if confirmation != "OUI":
            print("‚ùå Op√©ration annul√©e par l'utilisateur")
            return False
        
        # Double confirmation
        print("\nDerni√®re chance ! Cette action va supprimer d√©finitivement toutes les donn√©es de transaction.")
        final_confirmation = input("Tapez 'CONFIRMER' (en majuscules) pour proc√©der : ")
        
        if final_confirmation != "CONFIRMER":
            print("‚ùå Op√©ration annul√©e par l'utilisateur")
            return False
        
        return True
    
    def reset_transaction_data(self) -> bool:
        """Supprime toutes les donn√©es de transaction de mani√®re s√©curis√©e."""
        try:
            logger.info("D√©but de la purge des donn√©es de transaction")
            
            # D√©sactiver temporairement les contraintes de cl√©s √©trang√®res
            self.session.execute(text("SET session_replication_role = replica;"))
            
            deleted_counts = {}
            
            for table_name in self.TRANSACTION_TABLES:
                try:
                    # Compter avant suppression
                    count_before = self.session.execute(text(f"SELECT COUNT(*) FROM {table_name}")).scalar()
                    
                    if count_before > 0:
                        # Supprimer toutes les donn√©es de la table
                        result = self.session.execute(text(f"DELETE FROM {table_name}"))
                        deleted_counts[table_name] = result.rowcount
                        logger.info(f"Supprim√© {result.rowcount} enregistrements de {table_name}")
                    else:
                        deleted_counts[table_name] = 0
                        logger.info(f"Table {table_name} √©tait d√©j√† vide")
                        
                except Exception as e:
                    logger.error(f"Erreur lors de la suppression de {table_name}: {e}")
                    return False
            
            # R√©activer les contraintes de cl√©s √©trang√®res
            self.session.execute(text("SET session_replication_role = DEFAULT;"))
            
            # Commit de la transaction
            self.session.commit()
            
            # Afficher le r√©sum√©
            print("\n" + "="*60)
            print("‚úÖ PURGE TERMIN√âE AVEC SUCC√àS")
            print("="*60)
            
            total_deleted = 0
            for table, count in deleted_counts.items():
                print(f"  ‚Ä¢ {table:<20}: {count:>6} enregistrements supprim√©s")
                total_deleted += count
            
            print(f"  {'TOTAL':<20}: {total_deleted:>6} enregistrements supprim√©s")
            print("\nüéâ La base de donn√©es est maintenant pr√™te pour la production !")
            
            logger.info(f"Purge termin√©e avec succ√®s. {total_deleted} enregistrements supprim√©s au total")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la purge: {e}")
            self.session.rollback()
            return False
    
    def run(self):
        """Ex√©cute le processus complet de purge."""
        try:
            print("üßπ SCRIPT DE PURGE DES DONN√âES DE TEST - RECYCLIC")
            print("=" * 60)
            print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üë§ Utilisateur: {getpass.getuser()}")
            print("=" * 60)
            
            # 1. Afficher l'√©tat actuel
            self.display_current_state()
            
            # 2. Demander confirmation
            if not self.confirm_deletion():
                return False
            
            # 3. Effectuer la purge
            print("\nüîÑ D√©but de la purge...")
            if self.reset_transaction_data():
                print("\n‚úÖ Script termin√© avec succ√®s !")
                return True
            else:
                print("\n‚ùå Erreur lors de la purge !")
                return False
                
        except KeyboardInterrupt:
            print("\n\n‚ùå Op√©ration interrompue par l'utilisateur")
            return False
        except Exception as e:
            logger.error(f"Erreur inattendue: {e}")
            print(f"\n‚ùå Erreur inattendue: {e}")
            return False
        finally:
            if self.session:
                self.session.close()
            if self.engine:
                self.engine.dispose()

def main():
    """Point d'entr√©e principal du script."""
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not os.path.exists('api/src/recyclic_api'):
        print("‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet Recyclic")
        sys.exit(1)
    
    # Cr√©er le r√©pertoire de logs si n√©cessaire
    os.makedirs('logs', exist_ok=True)
    
    # Ex√©cuter le script
    reset_script = ProductionDataReset()
    success = reset_script.run()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
