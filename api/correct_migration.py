#!/usr/bin/env python3
import subprocess
import sys

def run_command(cmd):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def main():
    print("üîß Correction de l'√©tat des migrations...")
    
    # 1. Mettre √† jour l'√©tat de la base de donn√©es
    cmd = 'docker-compose exec -T postgres psql -U recyclic -d recyclic -c "UPDATE alembic_version SET version_num = \'afbbc7f0e804\';"'
    success, stdout, stderr = run_command(cmd)
    
    if success:
        print("‚úÖ √âtat de la base de donn√©es mis √† jour")
    else:
        print(f"‚ùå Erreur: {stderr}")
        return False
    
    # 2. V√©rifier que la table cash_sessions existe
    cmd = 'docker-compose exec -T postgres psql -U recyclic -d recyclic -c "SELECT table_name FROM information_schema.tables WHERE table_name = \'cash_sessions\';"'
    success, stdout, stderr = run_command(cmd)
    
    if "cash_sessions" in stdout:
        print("‚úÖ Table cash_sessions existe")
    else:
        print("‚ùå Table cash_sessions n'existe pas")
        return False
    
    # 3. V√©rifier l'√©tat des migrations
    cmd = 'docker-compose exec -T postgres psql -U recyclic -d recyclic -c "SELECT version_num FROM alembic_version;"'
    success, stdout, stderr = run_command(cmd)
    
    if success:
        print(f"‚úÖ Version actuelle: {stdout.strip()}")
    
    print("üéâ Correction termin√©e avec succ√®s!")
    return True

if __name__ == "__main__":
    main()
