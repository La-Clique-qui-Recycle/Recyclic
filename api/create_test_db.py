#!/usr/bin/env python3
"""
Script simple pour cr√©er les tables dans la base de donn√©es de test
"""

import os
import sys
from sqlalchemy import create_engine

# Configuration de la base de donn√©es de test
database_url = os.getenv("TEST_DATABASE_URL", "postgresql://recyclic:postgres@postgres:5432/recyclic_test")

print(f"üîß Connexion √† la base de donn√©es: {database_url}")

# Cr√©er le moteur
engine = create_engine(database_url)

try:
    print("üîß Cr√©ation des tables...")

    # Importer tous les mod√®les pour s'assurer qu'ils sont enregistr√©s dans Base.metadata
    from recyclic_api.models.user import User
    from recyclic_api.models.site import Site
    from recyclic_api.models.deposit import Deposit
    from recyclic_api.models.sale import Sale
    from recyclic_api.models.sale_item import SaleItem
    from recyclic_api.models.cash_session import CashSession
    from recyclic_api.models.cash_register import CashRegister
    from recyclic_api.models.login_history import LoginHistory
    from recyclic_api.models.sync_log import SyncLog
    from recyclic_api.models.registration_request import RegistrationRequest
    from recyclic_api.models.user_status_history import UserStatusHistory
    # Import correct AdminSetting model (singular module/file)
    from recyclic_api.models.admin_setting import AdminSetting

    # Reception domain models to ensure tables are created in tests
    from recyclic_api.models.poste_reception import PosteReception, PosteReceptionStatus
    from recyclic_api.models.ticket_depot import TicketDepot, TicketDepotStatus
    from recyclic_api.models.ligne_depot import LigneDepot

    # Cr√©er toutes les tables
    from recyclic_api.core.database import Base
    Base.metadata.create_all(bind=engine)

    print("‚úÖ Tables cr√©√©es avec succ√®s dans la base de donn√©es de test")
except Exception as e:
    print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
    sys.exit(1)

# V√©rifier les tables cr√©√©es
try:
    with engine.connect() as conn:
        result = conn.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE'")
        tables = [row[0] for row in result]
        print(f"üìã Tables cr√©√©es: {', '.join(tables)}")

        if 'users' in tables:
            print("‚úÖ Table 'users' cr√©√©e avec succ√®s")
        else:
            print("‚ùå Table 'users' manquante")
            sys.exit(1)
except Exception as e:
    print(f"‚ùå Erreur lors de la v√©rification des tables: {e}")
    sys.exit(1)

print("üéâ Base de donn√©es de test pr√™te pour les tests")
print("‚úÖ Toutes les tables ont √©t√© cr√©√©es avec succ√®s")
