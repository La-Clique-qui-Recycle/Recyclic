"""
Service de planification des t√¢ches pour le syst√®me Recyclic.

Ce service g√®re l'ex√©cution p√©riodique des t√¢ches de maintenance,
de monitoring et de rapports automatiques.
"""

import logging
import asyncio
from typing import Dict, List, Callable, Any, Optional
from datetime import datetime, timedelta, timezone
from contextlib import asynccontextmanager

from recyclic_api.core.database import get_db
from recyclic_api.core.database import SessionLocal
from recyclic_api.services.anomaly_detection_service import get_anomaly_detection_service
from recyclic_api.models.cash_session import CashSession
from recyclic_api.models.deposit import Deposit
from recyclic_api.models.user import User
from recyclic_api.models.sync_log import SyncLog
from sqlalchemy import and_

logger = logging.getLogger(__name__)


class ScheduledTask:
    """Repr√©sente une t√¢che planifi√©e."""

    def __init__(self, name: str, func: Callable, interval_minutes: int, enabled: bool = True):
        self.name = name
        self.func = func
        self.interval_minutes = interval_minutes
        self.enabled = enabled
        self.last_run: Optional[datetime] = None
        self.next_run: Optional[datetime] = None
        self.running = False

    def should_run(self) -> bool:
        """D√©termine si la t√¢che doit √™tre ex√©cut√©e maintenant."""
        if not self.enabled or self.running:
            return False

        if self.next_run is None:
            return True

        return datetime.now(timezone.utc) >= self.next_run

    def update_next_run(self):
        """Met √† jour la prochaine ex√©cution."""
        now = datetime.now(timezone.utc)
        self.last_run = now
        self.next_run = now + timedelta(minutes=self.interval_minutes)

    async def execute(self, *args, **kwargs):
        """Ex√©cute la t√¢che."""
        if self.running:
            logger.warning(f"T√¢che {self.name} d√©j√† en cours d'ex√©cution")
            return

        try:
            self.running = True
            logger.info(f"D√©marrage de la t√¢che {self.name}")

            result = await self.func(*args, **kwargs)

            self.update_next_run()
            logger.info(f"T√¢che {self.name} termin√©e avec succ√®s")

            return result

        except Exception as e:
            logger.error(f"Erreur lors de l'ex√©cution de la t√¢che {self.name}: {e}")
            self.update_next_run()  # On planifie quand m√™me la prochaine ex√©cution
            raise
        finally:
            self.running = False


class SchedulerService:
    """
    Service de planification des t√¢ches.

    G√®re l'ex√©cution p√©riodique des t√¢ches de maintenance et de monitoring.
    """

    def __init__(self):
        self.tasks: Dict[str, ScheduledTask] = {}
        self.running = False
        self._task = None

    def add_task(self, name: str, func: Callable, interval_minutes: int, enabled: bool = True):
        """Ajoute une nouvelle t√¢che planifi√©e."""
        task = ScheduledTask(name, func, interval_minutes, enabled)
        self.tasks[name] = task
        logger.info(f"T√¢che ajout√©e: {name} (interval: {interval_minutes} minutes)")

    async def run_anomaly_detection_task(self):
        """T√¢che de d√©tection d'anomalies."""
        logger.info("Ex√©cution de la d√©tection d'anomalies")

        # Utiliser un context manager sync pour la session DB
        try:
            with SessionLocal() as db:
                service = get_anomaly_detection_service(db)
                anomalies = await service.run_anomaly_detection()

                # Envoyer les notifications si des anomalies sont d√©tect√©es
                await service.send_anomaly_notifications(anomalies)

                return anomalies
        except Exception as e:
            logger.error(f"Erreur lors de la d√©tection d'anomalies: {e}")
            raise

    async def run_health_check_task(self):
        """T√¢che de v√©rification de la sant√© du syst√®me."""
        logger.info("Ex√©cution de la v√©rification de sant√©")

        # TODO: Impl√©menter la v√©rification de sant√©
        # - V√©rifier la connectivit√© DB
        # - V√©rifier la connectivit√© Redis
        # - V√©rifier la connectivit√© API externe
        # - V√©rifier les services critiques

        return {"status": "healthy", "timestamp": datetime.now(timezone.utc)}

    async def run_cleanup_task(self):
        """T√¢che de nettoyage des donn√©es."""
        logger.info("Ex√©cution du nettoyage des donn√©es")

        # TODO: Impl√©menter le nettoyage
        # - Supprimer les logs anciens
        # - Archiver les donn√©es anciennes
        # - Nettoyer les fichiers temporaires

        return {"status": "completed", "timestamp": datetime.now(timezone.utc)}

    async def run_weekly_reports_task(self):
        """T√¢che de g√©n√©ration des rapports hebdomadaires."""
        logger.info("Ex√©cution de la g√©n√©ration des rapports hebdomadaires")

        try:
            # Calculer la p√©riode du rapport (derniers 7 jours)
            end_date = datetime.now(timezone.utc)
            start_date = end_date - timedelta(days=7)

            # R√©cup√©rer les statistiques principales
            report_data = await self._generate_weekly_report_data(start_date, end_date)

            # G√©n√©rer le rapport format√©
            report_text = self._format_weekly_report(report_data, start_date, end_date)

            # Envoyer le rapport par email si possible
            success = await self._send_weekly_report_email(report_text, start_date, end_date)

            return {
                "status": "completed",
                "report_generated": True,
                "email_sent": success,
                "timestamp": datetime.now(timezone.utc)
            }

        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration du rapport hebdomadaire: {e}")
            raise

    async def _generate_weekly_report_data(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """G√©n√®re les donn√©es du rapport hebdomadaire."""
        with SessionLocal() as db:
            # Statistiques des sessions de caisse
            cash_sessions = db.query(CashSession).filter(
                and_(
                    CashSession.opened_at >= start_date,
                    CashSession.opened_at <= end_date
                )
            ).all()

            # Statistiques des ventes
            total_sales = sum(session.total_sales or 0 for session in cash_sessions)
            total_items = sum(session.total_items or 0 for session in cash_sessions)
            session_count = len(cash_sessions)

            # Statistiques des d√©p√¥ts
            deposits = db.query(Deposit).filter(
                and_(
                    Deposit.created_at >= start_date,
                    Deposit.created_at <= end_date
                )
            ).all()

            # Statistiques des utilisateurs
            users = db.query(User).all()

            # Statistiques des erreurs de synchronisation
            sync_errors = db.query(SyncLog).filter(
                and_(
                    SyncLog.created_at >= start_date,
                    SyncLog.created_at <= end_date,
                    SyncLog.status == 'error'
                )
            ).count()

            return {
                'period': {
                    'start_date': start_date,
                    'end_date': end_date
                },
                'cash_sessions': {
                    'count': session_count,
                    'total_sales': total_sales,
                    'total_items': total_items,
                    'average_session_value': total_sales / session_count if session_count > 0 else 0
                },
                'deposits': {
                    'count': len(deposits)
                },
                'users': {
                    'total': len(users),
                    'active': len([u for u in users if u.is_active])
                },
                'system': {
                    'sync_errors': sync_errors
                }
            }

    def _format_weekly_report(self, data: Dict[str, Any], start_date: datetime, end_date: datetime) -> str:
        """Formate les donn√©es du rapport en texte lisible."""
        report = f"""
# Rapport Hebdomadaire Recyclic
## P√©riode: {start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')}

## üìä R√©sum√© des Activit√©s

### Sessions de Caisse
- **Nombre de sessions**: {data['cash_sessions']['count']}
- **Chiffre d'affaires total**: {data['cash_sessions']['total_sales']:.2f}‚Ç¨
- **Nombre total d'articles**: {data['cash_sessions']['total_items']}
- **Valeur moyenne par session**: {data['cash_sessions']['average_session_value']:.2f}‚Ç¨

### D√©p√¥ts
- **Nombre de d√©p√¥ts**: {data['deposits']['count']}

### Utilisateurs
- **Total utilisateurs**: {data['users']['total']}
- **Utilisateurs actifs**: {data['users']['active']}

### Syst√®me
- **Erreurs de synchronisation**: {data['system']['sync_errors']}

## üìà Tendances

Ce rapport montre l'activit√© de la semaine √©coul√©e.
Le syst√®me de monitoring d√©tecte automatiquement les anomalies
et envoie des notifications en cas de probl√®me.

---
*Rapport g√©n√©r√© automatiquement le {datetime.now(timezone.utc).strftime('%d/%m/%Y √† %H:%M')}*
        """.strip()

        return report

    async def _send_weekly_report_email(self, report_text: str, start_date: datetime, end_date: datetime) -> bool:
        """Envoie le rapport hebdomadaire par email."""
        try:
            # TODO: Impl√©menter l'envoi d'email
            # Pour l'instant, on logue le rapport
            logger.info("Rapport hebdomadaire g√©n√©r√©:")
            logger.info(report_text)

            # Ici on pourrait utiliser le service email existant
            # Pour l'instant, on retourne True pour indiquer que le rapport a √©t√© g√©n√©r√©
            return True

        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du rapport hebdomadaire: {e}")
            return False

    def setup_default_tasks(self):
        """Configure les t√¢ches par d√©faut."""
        # D√©tection d'anomalies toutes les 30 minutes
        self.add_task(
            name="anomaly_detection",
            func=self.run_anomaly_detection_task,
            interval_minutes=30,
            enabled=True
        )

        # V√©rification de sant√© toutes les 5 minutes
        self.add_task(
            name="health_check",
            func=self.run_health_check_task,
            interval_minutes=5,
            enabled=True
        )

        # Nettoyage quotidien √† 2h du matin
        self.add_task(
            name="cleanup",
            func=self.run_cleanup_task,
            interval_minutes=1440,  # 24h
            enabled=True
        )

        # Rapports hebdomadaires tous les lundis √† 8h
        self.add_task(
            name="weekly_reports",
            func=self.run_weekly_reports_task,
            interval_minutes=10080,  # 7 jours
            enabled=True
        )

    async def run_scheduler_loop(self):
        """Boucle principale du scheduler."""
        logger.info("D√©marrage du scheduler")

        while self.running:
            try:
                now = datetime.now(timezone.utc)

                # Ex√©cuter les t√¢ches qui doivent l'√™tre
                for task in self.tasks.values():
                    if task.should_run():
                        try:
                            await task.execute()
                        except Exception as e:
                            logger.error(f"Erreur dans la t√¢che {task.name}: {e}")

                # Attendre 1 minute avant la prochaine v√©rification
                await asyncio.sleep(60)

            except Exception as e:
                logger.error(f"Erreur dans la boucle du scheduler: {e}")
                await asyncio.sleep(60)  # Attendre avant de r√©essayer

    async def start(self):
        """D√©marre le scheduler."""
        if self.running:
            logger.warning("Le scheduler est d√©j√† en cours d'ex√©cution")
            return

        self.running = True
        self._task = asyncio.create_task(self.run_scheduler_loop())

        # Configuration initiale des t√¢ches
        self.setup_default_tasks()

        logger.info("Scheduler d√©marr√© avec succ√®s")

    async def stop(self):
        """Arr√™te le scheduler."""
        if not self.running:
            logger.warning("Le scheduler n'est pas en cours d'ex√©cution")
            return

        logger.info("Arr√™t du scheduler")
        self.running = False

        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass

        logger.info("Scheduler arr√™t√©")

    def get_status(self) -> Dict[str, Any]:
        """Retourne le statut du scheduler."""
        tasks_status = []
        for task in self.tasks.values():
            tasks_status.append({
                'name': task.name,
                'enabled': task.enabled,
                'last_run': task.last_run.isoformat() if task.last_run else None,
                'next_run': task.next_run.isoformat() if task.next_run else None,
                'running': task.running,
                'interval_minutes': task.interval_minutes
            })

        return {
            'running': self.running,
            'tasks': tasks_status,
            'total_tasks': len(self.tasks)
        }

    def enable_task(self, name: str):
        """Active une t√¢che."""
        if name in self.tasks:
            self.tasks[name].enabled = True
            logger.info(f"T√¢che {name} activ√©e")

    def disable_task(self, name: str):
        """D√©sactive une t√¢che."""
        if name in self.tasks:
            self.tasks[name].enabled = False
            logger.info(f"T√¢che {name} d√©sactiv√©e")


# Instance globale du scheduler
scheduler_service = SchedulerService()


def get_scheduler_service() -> SchedulerService:
    """Factory function pour r√©cup√©rer l'instance du scheduler."""
    return scheduler_service
