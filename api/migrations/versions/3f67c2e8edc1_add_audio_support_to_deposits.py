"""Add audio support to deposits

Revision ID: 3f67c2e8edc1
Revises: 0000
Create Date: 2025-09-15 21:19:31.001522

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3f67c2e8edc1'
down_revision = '0000'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sites',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('deposits',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('site_id', sa.UUID(), nullable=True),
    sa.Column('telegram_user_id', sa.String(), nullable=True),
    sa.Column('audio_file_path', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('PENDING_AUDIO', 'AUDIO_PROCESSING', 'CLASSIFIED', 'VALIDATED', 'COMPLETED', name='depositstatus'), nullable=False),
    sa.Column('category', sa.Enum('SMALL_APPLIANCE', 'LARGE_APPLIANCE', 'IT_EQUIPMENT', 'LIGHTING', 'TOOLS', 'TOYS', 'MEDICAL_DEVICES', 'MONITORING_CONTROL', 'AUTOMATIC_DISPENSERS', 'OTHER', name='eeecategory'), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('ai_classification', sa.String(), nullable=True),
    sa.Column('ai_confidence', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['site_id'], ['sites.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('registration_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('telegram_id', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('site_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='registrationstatus'), nullable=False),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['site_id'], ['sites.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_registration_requests_telegram_id'), 'registration_requests', ['telegram_id'], unique=False)
    # Créer les types ENUM s'ils n'existent pas déjà
    connection = op.get_bind()
    
    # Créer userrole enum
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'userrole'"))
    if not result.fetchone():
        userrole_enum = sa.Enum('super-admin', 'admin', 'manager', 'cashier', 'user', name='userrole')
        userrole_enum.create(connection)
    
    # Créer userstatus enum
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'userstatus'"))
    if not result.fetchone():
        userstatus_enum = sa.Enum('pending', 'approved', 'rejected', name='userstatus')
        userstatus_enum.create(connection)
    
    # Supprimer les valeurs par défaut avant de modifier le type
    op.alter_column('users', 'role', server_default=None)
    op.alter_column('users', 'status', server_default=None)
    
    # Modifier les types
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('super-admin', 'admin', 'manager', 'cashier', 'user', name='userrole'),
               existing_nullable=False,
               postgresql_using='role::userrole')
    op.alter_column('users', 'status',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('pending', 'approved', 'rejected', name='userstatus'),
               existing_nullable=False,
               postgresql_using='status::userstatus')
    
    # Remettre les valeurs par défaut
    op.alter_column('users', 'role', server_default=sa.text("'user'::userrole"))
    op.alter_column('users', 'status', server_default=sa.text("'pending'::userstatus"))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'status',
               existing_type=sa.Enum('pending', 'approved', 'rejected', name='userstatus'),
               type_=sa.VARCHAR(),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('super-admin', 'admin', 'manager', 'cashier', 'user', name='userrole'),
               type_=sa.VARCHAR(),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
    op.drop_index(op.f('ix_registration_requests_telegram_id'), table_name='registration_requests')
    op.drop_table('registration_requests')
    op.drop_table('deposits')
    op.drop_table('sites')
    # ### end Alembic commands ###
