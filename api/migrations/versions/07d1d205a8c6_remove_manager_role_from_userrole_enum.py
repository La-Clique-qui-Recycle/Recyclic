"""remove manager role from userrole enum

Revision ID: 07d1d205a8c6
Revises: 1f030e91bee7
Create Date: 2025-01-27 10:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '07d1d205a8c6'
down_revision = '1f030e91bee7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. First, update any users with 'manager' role to 'user' role
    op.execute("UPDATE users SET role = 'user' WHERE role = 'manager'")
    
    # 2. Create a new enum type without 'manager'
    op.execute("CREATE TYPE userrole_new AS ENUM ('super-admin', 'admin', 'user')")
    
    # 3. Update the column to use the new enum type
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE userrole_new USING role::text::userrole_new")
    
    # 4. Drop the old enum type
    op.execute("DROP TYPE userrole")
    
    # 5. Rename the new enum type to the original name
    op.execute("ALTER TYPE userrole_new RENAME TO userrole")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create the old enum type with 'manager'
    op.execute("CREATE TYPE userrole_old AS ENUM ('super-admin', 'admin', 'manager', 'user')")
    
    # 2. Update the column to use the old enum type
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE userrole_old USING role::text::userrole_old")
    
    # 3. Drop the current enum type
    op.execute("DROP TYPE userrole")
    
    # 4. Rename the old enum type to the original name
    op.execute("ALTER TYPE userrole_old RENAME TO userrole")
    
    # ### end Alembic commands ###




